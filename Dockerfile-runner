# B A S E
# =======
#
# This is the base image. It should be defined exactly as it will be deployed.
#
FROM node:11.2.0-alpine as base

# Create app directory and set as working directory:
#
WORKDIR /usr/src/app

# Copy dependency definitions and then install:
#
COPY app/package.json .
ENV NODE_ENV=production
RUN npm install

# Move the installed modules to the global area and make sure
# that they can be found by Node:
#
# Note that this is very different to doing 'npm install -g'
# in the previous step; that would install all dependencies
# in the project directory, whilst symlinking the current
# module in as a global dependency.
#
RUN mv node_modules/* node_modules/.bin /usr/local/lib/node_modules
ENV NODE_PATH /usr/local/lib/node_modules

# Tidy up:
#
RUN npm cache clean --force

# Copy in the source files:
#
COPY app/ ./

# The Node image should really have set this:
#
ENTRYPOINT ["node"]

# Launch the app:
#
CMD ["pipeline"]

# Check health every 30s, and allow 30s for a response:
#
#HEALTHCHECK CMD wget --tries 1 --quiet --spider http://localhost:$PORT/status || exit 1

# T E S T
# =======
#
# This is a testing layer on top of the deployable image. It should be as
# minimal as possible.
#
FROM base as test

# Install any required test tools:
#
# Note that this is not the same as doing 'npm install -g --only=dev' since
# that won't install devDependencies globally.
#
ENV NODE_ENV=testing
RUN npm i -g tap@^12.1.0

ENTRYPOINT ["tap"]
