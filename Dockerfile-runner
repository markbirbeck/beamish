# B A S E
# =======
#
# This is the base image. It should be defined exactly as it will be deployed.
#
FROM node:11.2.0-alpine as base

# Create app directory and set as working directory:
#
WORKDIR /usr/src/app

RUN apk add --update python build-base

# Copy dependency definitions and then install:
#
COPY package.json .
ENV NODE_ENV=production
RUN npm install

# Move the installed modules to the global area and make sure
# that they can be found by Node:
#
# Note that this is very different to doing 'npm install -g'
# in the previous step; that would install all dependencies
# in the project directory, whilst symlinking the current
# module in as a global dependency.
#
RUN mv node_modules/* node_modules/.bin /usr/local/lib/node_modules
ENV NODE_PATH /usr/local/lib/node_modules

# Tidy up:
#
RUN npm cache clean --force

# Copy in the source files:
#
COPY lib/ /usr/local/lib/node_modules/beamish-direct-runner/lib/

# The Node image should really have set this:
#
ENTRYPOINT ["node"]

# Launch the app:
#
CMD ["pipeline"]

# Check health every 30s, and allow 30s for a response:
#
#HEALTHCHECK CMD wget --tries 1 --quiet --spider http://localhost:$PORT/status || exit 1

# T E S T
# =======
#
# The following are testing layers on top of the deployable image. They should
# be as minimal as possible.
#
FROM base as test

ENV NODE_ENV=test
RUN npm install -g \
  mockserver-client@^5.5.0

# T A P   T E S T
# ===============
#
# Install any required test tools for TAP.
#
FROM test as tap-test

# Note that this is not the same as doing 'npm install -g --only=dev' since
# that won't install devDependencies globally.
#
RUN npm i -g tap@^12.1.0

ENTRYPOINT ["tap"]

# M O C H A   T E S T
# ===================
#
# Install any required test tools for Mocha.
#
FROM test as mocha-test

# Note that this is not the same as doing 'npm install -g --only=dev' since
# that won't install devDependencies globally.
#
RUN npm i -g \
  chai@^4.2.0 \
  chai-http@^4.2.0 \
  chai-as-promised@^7.1.1 \
  mocha@^5.2.0

ENTRYPOINT ["mocha"]
